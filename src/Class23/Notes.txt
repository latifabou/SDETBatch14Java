Method overriding:
     Method overriding allows us to have same methods in parent class and child classes.
Why we should override a method?
     1)when we inherit from a class everything is inherited other than private methods and constructors.
     If we don't like any method from the parent class we can override it.
     2)It helps us acheive polymorphism.
What is the syntax to override a method?
     1)first there must be a parent child relationship;
     2)in child class just redefine the method.

Type casting in objects:
      as we can type cast in the primitive data types we can also type cast the objects, like storing the objects
      of a child class in a variable of parent class.
Why we should type cast the objects?
      with the help of type casting we start storing objects of child classes in an array of type parent.
What is the syntax to type cast?
      It is the same as primitive type casting for example if we have animal class and animal has a child class cat,
      we can do: Animal animal=new Cat();
      parent name[]arr={new childClasses name()...};

Polymorphism:
      Polymorphism is the ability of a method to take many forms based on the object or the parameters that we
      pass to the method.
Types of polymorphism:
      there are two types of polymorphism:
      1)compile time/static/early binding:
      when we use method overloading to acheive polymorphism it is called compile time polymorphism.
      2)run time/dynamic/late binding:
      when we use method overriding to acheive polymorphism it is called run time polymorphism.

Final keyword:
      final keyword is just like any other keyword in java like class, package, void...
There 3 main use of final keyword:
      1)If we use final keyword with a class no other class can inherit from that class
      2)If we use it with a method no child class can override that method
      3)If we use with a field, once a value has been assigned to that field no one can change its value afterwords.

